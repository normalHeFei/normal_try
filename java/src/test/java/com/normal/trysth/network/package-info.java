/**
 * Created by hefei on 2017/5/3.
 */
package com.normal.trysth.network;
/***
 * refer from :http://blog.csdn.net/zdy0_2004/article/details/40196783
 *  阻塞，非阻塞:
 *       这两个概念是程序级别的。主要描述的是程序请求操作系统IO操作后，如果IO资源没有准备好，那么程序该如何处理的问题：
 *       前者等待；后者继续执行（并且使用线程一直轮询，直到有IO资源准备好了）
 *  同步IO和非同步io:
 *       这两个概念是操作系统级别的。主要描述的是操作系统在收到程序请求IO操作后，如果IO资源没有准备好，该如何响应程序的问题：
 *       前者不响应，直到IO资源准备好以后；后者返回一个标记（好让程序和自己知道以后的数据往哪里通知），当IO资源准备好以后，再用事件机制返回给程序。
 *  阻塞io/非阻塞同步io/非阻塞异步io：
 *       这个解释更加易于理解：
 *          1. 阻塞io指的是控制权只到调用操作结束了才会回到调用者手里.调用者在这期间什么事情都做不了
 *          2. 非阻塞同步io，非阻塞同步是会立即返回控制权给调用者的。调用者不需要等等，它从调用的函数获取两种结果：要么此次调用成功进行了;要么系统返回错误标识告诉调用者当前资源不可用，你再等等或者再试度看吧,通过轮询的方式
 *          3. 非阻塞异步io：程序请求io操作的时候，会立即返回给调用者，还告诉调用者，这次请求已经开始了。系统会使用另外的资源或者线程来完成这次调用操作，并在完成的时候知会调用者（比如通过回调函数）
 *
 *   i/o流概述：
 *       1.流分为两类，
 *              一种叫做链接流(可以对同类的流(链接流)做装饰)，如bufferInputStream;
 *              另一种叫做原始流：针对于不同数据类型的数据有不同的实现，如FileInputStream,StringBufferInputStream; 可以理解为将File,String是适配成InputStream
 *       2. inputStream 和 reader 等同，只不过前者操作byte，后者操作char
 *       3. 装饰者模式和适配模式都是wrapper的一种体现，两者的区别在于，
 *              前者：装饰类与被装饰者都是集成相同的接口，并对原有功能进行加强和补充（新增方法）
 *              后者：适配是要将一个接口转化成另一个接口
 *          装饰者模式适用于需要动态增加功能的情况，如果功能的需求是稳定的，直接放在原有类即可
 *   其他的零碎问题：
 *      1. 传输层是已报文的形式来进行传播的，报文分为头部和playload部分，playload部分用来承载数据。数据的传输是分块的，应用程序需要在目的地对数据分块进行组装
 *      socket api 统一了以byte流的形式 传输数据，屏蔽了传输底层的机制
 *      2.关于socket的一个比较好的解释：
 *          Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。
 *
 */